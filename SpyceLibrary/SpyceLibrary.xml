<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpyceLibrary</name>
    </assembly>
    <members>
        <member name="T:SpyceLibrary.Camera">
            <summary>
            Handles matrix camera transformations.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Camera.Position">
            <summary>
            The position of the camera.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Camera.#ctor">
            <summary>
            Creates a new instance of the camera.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Camera.FixViewOn(SpyceLibrary.GameObject)">
            <summary>
            Fixes the view on the object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SpyceLibrary.Camera.SetViewOffsetPercent(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the percentage for how offset the camera is relative to the screen.
            </summary>
            <param name="pOffset"></param>
        </member>
        <member name="M:SpyceLibrary.Camera.SetOffset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the offset of the camera.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:SpyceLibrary.Camera.GetTransformedMatrix">
            <summary>
            Gets the transformed viewport matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Debugging.Commands.CommandHandler">
            <summary>
            Takes in full command lines and parses it into a command form.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Debugging.Commands.CommandHandler.Instance">
            <summary>
            Singleton access to the command handler.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Commands.CommandHandler.COMMAND_NAME">
            <summary>
            The name of the debug messages that originate from this class.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.CommandHandler.Initialize(SpyceLibrary.Initializer)">
            <summary>
            Initializes the command handler.
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.CommandHandler.ParseCommand(System.String,System.String)">
            <summary>
            Parses the arguments and executes the command.
            </summary>
            <param name="sender"></param>
            <param name="command"></param>
        </member>
        <member name="T:SpyceLibrary.Debugging.Commands.EchoCommand">
            <summary>
            A simple echo command that prints the text after the command.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.EchoCommand.Run(System.String,System.String[],SpyceLibrary.Initializer)">
            <summary>
            Runs the echo command.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.EchoCommand.Help">
            <summary>
            Prints out the syntax for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Debugging.Commands.ExitCommand">
            <summary>
            Exits the game.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ExitCommand.Help">
            <summary>
            The syntax of the command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ExitCommand.Run(System.String,System.String[],SpyceLibrary.Initializer)">
            <summary>
            Runs the exit command.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="initializer"></param>
        </member>
        <member name="T:SpyceLibrary.Debugging.Commands.ICommand">
            <summary>
            Base class for all console commands.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ICommand.Run(System.String,System.String[],SpyceLibrary.Initializer)">
            <summary>
            Executes the command with the given arguments
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ICommand.Help">
            <summary>
            The summary and syntax for what this command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Debugging.Commands.ListCommand">
            <summary>
            Lists specific things in the game.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ListCommand.Run(System.String,System.String[],SpyceLibrary.Initializer)">
            <summary>
            Runs the list command.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Commands.ListCommand.Help">
            <summary>
            Gets the syntax for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Debugging.Debug">
            <summary>
            Debugging and performance analysis tools. Singleton to be universally access throughout
            the game project.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Debugging.Debug.DebugEvent">
            <summary>
            Delegate handler for each event that is relevant to the debug object.
            </summary>
            <param name="sender"></param>
            <param name="contents"></param>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.OnNewDebugMessage">
            <summary>
            When a new message is added to the debug log.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.OnCommandSend">
            <summary>
            When a line is sent through the command prompt.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.OnLogsCleared">
            <summary>
            When the logs are cleared.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.OnLogsSaved">
            <summary>
            When the logs are saved
            </summary>
        </member>
        <member name="P:SpyceLibrary.Debugging.Debug.Instance">
            <summary>
            Accessor for the singleton.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Debugging.Debug.TickSpeed">
            <summary>
            The measured time (milliseconds) between a draw and update function.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Debugging.Debug.UpdateTime">
            <summary>
            The time it takes to run the update loop.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Debugging.Debug.DrawTime">
            <summary>
            The time it takes to run the draw loop.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.LOGS_FOLDER">
            <summary>
            The main folder where all the logs are saved to.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.Debug.LOGS_FILE_EXTENSION">
            <summary>
            The file extension for the logs.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.Initialize(SpyceLibrary.Engine,SpyceLibrary.Initializer)">
            <summary>
            Initializes the in-game debugger.
            </summary>
            <param name="engine"></param>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.ClearLogs(System.String)">
            <summary>
            Clears all the logs.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.WriteLine(System.String,System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes a new line to the debug log.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <param name="senderColor"></param>
            <param name="messageColor"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.SaveLog(System.String)">
            <summary>
            Saves the log to the logs folder as a timestamped file.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.SaveLog(System.String,System.String)">
            <summary>
            Saves the log to the specified path.
            </summary>
            <param name="sender"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.ParseCommand(System.String,System.String)">
            <summary>
            Parses the given line to the command prompt.
            </summary>
            <param name="sender"></param>
            <param name="toParse"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.StartUpdateTick">
            <summary>
            Starts counting the current cycle of the game loop.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.EndUpdateTick">
            <summary>
            Ends the counting of the current cycle of the update.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.StartDrawTick">
            <summary>
            Starts counting the current cycle of the game loop.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.EndDrawTick">
            <summary>
            Ends the counting of the current cycle of the update.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.listObjects(System.String)">
            <summary>
            Lists all the objects within the current scene.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.GetCurrentSceneObjectCount">
            <summary>
            Gets the number of objects in the current scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Debugging.Debug.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws debug items to the screen.
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="F:SpyceLibrary.Debugging.LogEntry.Sender">
            <summary>
            The name of the sender.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.LogEntry.Message">
            <summary>
            The content of the message.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Debugging.LogEntry.Time">
            <summary>
            The time the message was created.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Engine">
            <summary>
            The game engine holds various components from the game and runs them respectively.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Engine.#ctor">
            <summary>
            Creates a new instance of the engine.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Engine.Initialize">
            <summary>
            Initializes the graphics window.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Engine.LoadContent">
            <summary>
            Loads and initializes necessary game assets.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Engine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the game and it's members.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Engine.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the instance of the engine.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Engine.OnExiting(System.Object,System.EventArgs)">
            <summary>
            Called when the game is exiting.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:SpyceLibrary.GameComponent">
            <summary>
            An abstract component that is attached to a game object
            </summary>
        </member>
        <member name="T:SpyceLibrary.GameComponent.ComponentEvent">
            <summary>
            Delegate for handling events related to UI components.
            </summary>
            <param name="component"></param>
        </member>
        <member name="F:SpyceLibrary.GameComponent.OnEnable">
            <summary>
            When the component is enabled.
            </summary>
        </member>
        <member name="F:SpyceLibrary.GameComponent.OnDisable">
            <summary>
            When the component is disabled.
            </summary>
        </member>
        <member name="F:SpyceLibrary.GameComponent.OnDestroy">
            <summary>
            When the component is being destroyed.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameComponent.IsEnabled">
            <summary>
            Whether this component should be updated or drawn.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameComponent.Holder">
            <summary>
            The game object that this component is attached to.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameComponent.#ctor">
            <summary>
            Creates a new instance of the game component.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameComponent.RequireComponent``1">
            <summary>
            Checks if the component is in the game object and throws an exception if it is not.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpyceLibrary.GameComponent.Unload">
            <summary>
            Performs any final cleanup operations that aren't handled through regular garbage collection.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameComponent.SetActive(System.Boolean)">
            <summary>
            Sets the activeness of the component.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameComponent.Load(SpyceLibrary.Initializer,SpyceLibrary.GameObject)">
            <summary>
            Called before the first Update has been called and after the object is created
            </summary>
            <param name="init"></param>
            <param name="holder"></param>
        </member>
        <member name="T:SpyceLibrary.IUpdated">
            <summary>
            An object that has realtime update behavior.
            </summary>
        </member>
        <member name="M:SpyceLibrary.IUpdated.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the object.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:SpyceLibrary.IDrawn">
            <summary>
            An object that has draw behavior.
            </summary>
        </member>
        <member name="F:SpyceLibrary.IDrawn.MAX_DRAW_ORDER">
            <summary>
            The maximum number of layers to be drawn on.
            </summary>
        </member>
        <member name="M:SpyceLibrary.IDrawn.DrawOrder">
            <summary>
            The draw order of the game component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.IDrawn.GetDrawRectangle">
            <summary>
            The visible rectangle on the game world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.IDrawn.Draw">
            <summary>
            Draws the object to the screen.
            </summary>
        </member>
        <member name="T:SpyceLibrary.GameObject">
            <summary>
            Represents an abstract game object within the game.
            </summary>
        </member>
        <member name="T:SpyceLibrary.GameObject.GameObjectEvent">
            <summary>
            Delegate handler for game object events.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:SpyceLibrary.GameObject.OnEnable">
            <summary>
            When the object is enabled.
            </summary>
        </member>
        <member name="E:SpyceLibrary.GameObject.OnDisable">
            <summary>
            When the object is disabled.
            </summary>
        </member>
        <member name="E:SpyceLibrary.GameObject.OnDestroy">
            <summary>
            When the object is being destroyed.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameObject.ID">
            <summary>
            The unique ID of this game object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameObject.IsActive">
            <summary>
            Whether this object currently has behavior.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameObject.Components">
            <summary>
            The components attached to this game object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameObject.Children">
            <summary>
            All game objects are childed to this game object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.GameObject.RelativeTransform">
            <summary>
            The relative transformation (before applying parent transformations).
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameObject.#ctor">
            <summary>
            Creates a new instance of a game object.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameObject.Destroy">
            <summary>
            Frees up the memory in the game object and its components.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameObject.GenerateNewID">
            <summary>
            Generates a new unique id for this object.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameObject.SetParent(SpyceLibrary.GameObject)">
            <summary>
            Sets the parent of the game object.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.Load(SpyceLibrary.Initializer)">
            <summary>
            Initializes the game object and loads all necessary assets.
            </summary>
            <param name="init"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the game object, components, and children.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.Draw">
            <summary>
            Draws all the drawable components.
            </summary>
        </member>
        <member name="M:SpyceLibrary.GameObject.AddComponent(SpyceLibrary.GameComponent)">
            <summary>
            Adds a component to the list of components
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.GetComponent``1">
            <summary>
            Gets the component if it is attached to this game object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.GameObject.SetRelativeTransform(SpyceLibrary.Transform)">
            <summary>
            Sets the relative transform of the game object.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.GetTransform">
            <summary>
            Gets the relative to world transform of the game object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.GameObject.SetActive(System.Boolean)">
            <summary>
            Sets the current object's activeness.
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.HasTag(System.String)">
            <summary>
            Searches the list of tags for the specified tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.GameObject.AddTags(System.String[])">
            <summary>
            Adds a list of tags to the set of tags.
            </summary>
            <param name="addTags"></param>
        </member>
        <member name="M:SpyceLibrary.GameObject.ToString">
            <summary>
            Gets a string representation of the game object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.GameObject.IsDirectChild(SpyceLibrary.GameObject,SpyceLibrary.GameObject)">
            <summary>
            Checks if the first element is the direct parent of the second element.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Initializer">
            <summary>
            Holds necessary data members for initializing game objects.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Initializer.Content">
            <summary>
            Loads content for the game object.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Initializer.Graphics">
            <summary>
            The graphics device for the game engine.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Initializer.SpriteBatch">
            <summary>
            Allows for creation of sprite batches and drawn to the screen.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Initializer.Device">
            <summary>
            The graphics device manager of the game.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Initializer.Window">
            <summary>
            The window of the game engine.
            </summary>
        </member>
        <member name="T:SpyceLibrary.InputManager">
            <summary>
            A singleton class that handles user input.
            </summary>
        </member>
        <member name="P:SpyceLibrary.InputManager.Instance">
            <summary>
            Singleton access to the input manager.
            </summary>
        </member>
        <member name="T:SpyceLibrary.InputManager.KeyboardEventHandler">
            <summary>
            Delegate handler for events from keyboards.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:SpyceLibrary.InputManager.MouseEventHandler">
            <summary>
            Delegate handlder for events from them mouse.
            </summary>
            <param name="button"></param>
        </member>
        <member name="E:SpyceLibrary.InputManager.OnKeyPress">
            <summary>
            When a key is first pressed down.
            </summary>
        </member>
        <member name="E:SpyceLibrary.InputManager.OnKeyRelease">
            <summary>
            When a key is first released.
            </summary>
        </member>
        <member name="E:SpyceLibrary.InputManager.OnMousePress">
            <summary>
            When a mouse button has just been pressed.
            </summary>
        </member>
        <member name="E:SpyceLibrary.InputManager.OnMouseRelease">
            <summary>
            When a mouse button has just been released.
            </summary>
        </member>
        <member name="E:SpyceLibrary.InputManager.OnScroll">
            <summary>
            When the scroll wheel has just been scrolled.
            </summary>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsScrolledUp">
            <summary>
            Determines if the mouse is scrolled up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsScrolledDown">
            <summary>
            Determines if the mouse is scrolled down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.MouseScrollAmount">
            <summary>
            Returns the amount the mouse is scrolled in this update cycle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsMouseClicked(SpyceLibrary.MouseButton)">
            <summary>
            Determines whether the mouse has been clicked.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsMouseUp(SpyceLibrary.MouseButton)">
            <summary>
            Determines if the button is currently being held down.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsMouseDown(SpyceLibrary.MouseButton)">
            <summary>
            Determines if the button is currently being held down.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Determines whether the key(s) have been pressed.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Determines whether the key(s) are released.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.IsKeyDown(Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Determines whether the key(s) are down.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.InputManager.Update">
            <summary>
            Updates the state of the input manager.
            </summary>
        </member>
        <member name="M:SpyceLibrary.InputManager.findNewKeys``1(``0[],``0[])">
            <summary>
            Creates a list of keys that are currently in a, but not in b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.MouseButton">
            <summary>
            The mouse buttons on a mouse.
            </summary>
        </member>
        <member name="F:SpyceLibrary.MouseButton.LEFT">
            <summary>
            The left mouse button
            </summary>
        </member>
        <member name="F:SpyceLibrary.MouseButton.RIGHT">
            <summary>
            The right mouse button
            </summary>
        </member>
        <member name="F:SpyceLibrary.MouseButton.MIDDLE">
            <summary>
            The middle mouse button
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.BoxCollider.Size">
            <summary>
            The size of the collider.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.BoxCollider.Offset">
            <summary>
            The offset of the collider.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.BoxCollider.#ctor">
            <summary>
            Creates a new instance of the collider.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.BoxCollider.ConstructRectangleAt(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Constructs a rectangle at the given position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Physics.BoxCollider.SetOffset(Microsoft.Xna.Framework.Point)">
            <summary>
            Sets the offset of the collision rectangle.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.BoxCollider.SetBounds(Microsoft.Xna.Framework.Point)">
            <summary>
            Sets the size of the collision rectangle.
            </summary>
            <param name="size"></param>
        </member>
        <member name="T:SpyceLibrary.Physics.PhysicsBody">
            <summary>
            A member of the physics engine. This represents a physical object within the game world
            that has physics-based behaviors and interactions with other physical objects.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.PhysicsBody.Position">
            <summary>
            Position of the physics body.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.PhysicsBody.Velocity">
            <summary>
            The velocity of the body for this tick.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.PhysicsBody.IsCollidable">
            <summary>
            Whether this object should be collided with in the collision detection.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Physics.PhysicsBody.Collider">
            <summary>
            The rectangular collision rectangle of the physics body. TODO: Change to a more
            generic collider type.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsBody.#ctor">
            <summary>
            Creates a new instance of the physics body.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsBody.Load(SpyceLibrary.Initializer,SpyceLibrary.GameObject)">
            <summary>
            Initializes the physics body.
            </summary>
            <param name="init"></param>
            <param name="holder"></param>
        </member>
        <member name="T:SpyceLibrary.Physics.PhysicsEngine">
            <summary>
            Updates physical objects within the game world.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Physics.PhysicsEngine.QUAD_SIZE">
            <summary>
            The size of each theoretical quad.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.#ctor">
            <summary>
            Creates a new instance of the physics engine.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.Initialize(SpyceLibrary.Initializer)">
            <summary>
            Initializes the physics engine.
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.RegisterBody(SpyceLibrary.Physics.PhysicsBody)">
            <summary>
            Registers the body to the engine.
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of each physics engine.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.Clear">
            <summary>
            Clears all the bodies from the physics engine.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.Draw(SpyceLibrary.Camera)">
            <summary>
            Debug Purposes. Draws a half opacity rectangle for all the physics bodies in the world.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.UnregisterQuadBody(SpyceLibrary.Physics.PhysicsBody)">
            <summary>
            Unregisters the bod with the quad map.
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.PhysicsEngine.ReaddQuadBody(SpyceLibrary.Physics.PhysicsBody)">
            <summary>
            Registers the quad bodies of this body into the quad map.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:SpyceLibrary.Physics.TestComponent">
            <summary>
            A component for testing means.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.TestComponent.#ctor">
            <summary>
            Creates a new instance of the test component.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Physics.TestComponent.Load(SpyceLibrary.Initializer,SpyceLibrary.GameObject)">
            <summary>
            Loads the test component.
            </summary>
            <param name="init"></param>
            <param name="holder"></param>
        </member>
        <member name="M:SpyceLibrary.Physics.TestComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the player controller.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:SpyceLibrary.Program">
            <summary>
            Game runner class.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Program.Main">
            <summary>
            Main method.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Program.NAME">
            <summary>
            The debug name of the game runner.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Program.Run">
            <summary>
            Runs the game.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Scene">
            <summary>
            A scene represents a set of various game objects interacting. Scenes are indepedent of each other and
            can be interchangebly loaded using the scene manager.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Scene.GameObjects">
            <summary>
            Refernce to the data structure holding all the game objects in the game.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Scene.ScreenRectangle">
            <summary>
            The rectangle of the screen.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scene.#ctor">
            <summary>
            Creates a new instance of the game scene.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scene.SetScreenRectangleBounds(System.Int32,System.Int32)">
            <summary>
            Sets the size of the screen rectangle.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.SetScreenRectangleLocation(System.Int32,System.Int32)">
            <summary>
            Sets the position of the screen rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.PrintTickSpeed">
            <summary>
            Prints the current tick speed and FPS to the debug console.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scene.GetDebugName">
            <summary>
            The debug name of the current scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Scene.SaveObject(SpyceLibrary.GameObject,System.String)">
            <summary>
            Saves the object to a specified path.
            </summary>
            <param name="obj"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.LoadObject(System.String)">
            <summary>
            Loads an object from a specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Scene.RemoveInterval(System.Action)">
            <summary>
            Removes an existing intervaled function.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.SetInterval(System.Action,System.Single,System.Single)">
            <summary>
            Runs a function on a fixed interval.
            </summary>
            <param name="action"></param>
            <param name="interval"></param>
            <param name="time"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.Unload">
            <summary>
            Performs any cleanup operations not done in regular garbage collection.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scene.AddObject(SpyceLibrary.GameObject)">
            <summary>
            Adds an object to the game scene.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.OnObjectDestruction(SpyceLibrary.GameObject)">
            <summary>
            When an object is destroyed, it is removed from the scene.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.RemoveObject(System.Guid)">
            <summary>
            Removes an object from the game scene.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.Initialize(SpyceLibrary.Initializer)">
            <summary>
            Initializes the game scene with the necessary resources.
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.Load(SpyceLibrary.Initializer)">
            <summary>
            Called before the first update is called.
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates all the game objects in this scene.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Scene.Draw">
            <summary>
            Calls draw on each of the objects in the scene.
            </summary>
        </member>
        <member name="T:SpyceLibrary.SceneManager">
            <summary>
            A singleton object that handles various screen states. This has functionality that allows for
            smooth transitions between different screen states.
            </summary>
        </member>
        <member name="P:SpyceLibrary.SceneManager.Instance">
            <summary>
            Static access to the singleton scene manager object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.SceneManager.CurrentScene">
            <summary>
            The scene that is currently being drawn and updated.
            </summary>
        </member>
        <member name="P:SpyceLibrary.SceneManager.CurrentSceneType">
            <summary>
            The type of the current scene.
            </summary>
        </member>
        <member name="M:SpyceLibrary.SceneManager.RegisterScene(System.Type,System.String)">
            <summary>
            Registers a scene with the scene manager.
            </summary>
            <param name="sceneType"></param>
            <param name="sceneName"></param>
        </member>
        <member name="M:SpyceLibrary.SceneManager.OnExiting">
            <summary>
            Called when the game is closing.
            </summary>
        </member>
        <member name="M:SpyceLibrary.SceneManager.GetWindowSize">
            <summary>
            Returns the size of the window in pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.SceneManager.SetFrameDimension(System.Int32,System.Int32)">
            <summary>
            Sets the dimension of the window
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SpyceLibrary.SceneManager.Initialize(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.GraphicsDeviceManager,Microsoft.Xna.Framework.GameWindow)">
            <summary>
            Initializes the scene manager.
            </summary>
            <param name="content"></param>
            <param name="spriteBatch"></param>
            <param name="device"></param>
            <param name="graphics"></param>
            <param name="window"></param>
        </member>
        <member name="M:SpyceLibrary.SceneManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the scene manager and it's current scene.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.SceneManager.Draw">
            <summary>
            Renders the contents of the scene manager and it's current scene.
            </summary>
        </member>
        <member name="M:SpyceLibrary.SceneManager.ChangeScene(System.String)">
            <summary>
            Changes the scene to the given scene.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SpyceLibrary.SceneManager.LoadScene(System.String)">
            <summary>
            Creates a new instance of the given scene and returns it.
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Scenes.TestScene">
            <summary>
            This is the scene that will test the various functionality.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Scenes.TestScene.NAME">
            <summary>
            The name of this scene.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Scenes.TestScene.WINDOW_WIDTH">
            <summary>
            Width of the window size.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Scenes.TestScene.WINDOW_HEIGHT">
            <summary>
            Height of the window size.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.#ctor">
            <summary>
            Creates a new instance of the game scene.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.Load(SpyceLibrary.Initializer)">
            <summary>
            Loads the scene and initializes it's data members.
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.Unload">
            <summary>
            Unloads the test scene
            </summary>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.AddObject(SpyceLibrary.GameObject)">
            <summary>
            Adds an object to the scene
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the instance of the game scene.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Scenes.TestScene.Draw">
            <summary>
            Draws the contents of the game scene to the screen.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Sprites.AnimatedSprite">
            <summary>
            A spritesheet based sprite.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Sprites.AnimatedSprite.#ctor">
            <summary>
            Creates a new instance of the Animated Sprite.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Sprites.SpriteAnimation">
            <summary>
            Represents an individual animation for a spritesheet.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.SpriteAnimation.FrameData">
            <summary>
            The list of frame data in the animated sprite.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.SpriteAnimation.CurrentFrame">
            <summary>
            The current frame being displayed.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Sprites.SpriteAnimation.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the animated sprite.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.SpriteAnimation.SetCurrentFrame(System.Int32)">
            <summary>
            Sets the current frame of the animated sprite.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="T:SpyceLibrary.Sprites.FrameData">
            <summary>
            Represents a single frame for an animation.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.FrameData.Position">
            <summary>
            The position of the frame data on the texture file.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.FrameData.Time">
            <summary>
            The amount of time is spent on this individual frame.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.FrameData.Texture">
            <summary>
            The texture that the frame is located on. Each frame data holds a refernce to its
            texture to allow for animations to potentially consist of different files.
            </summary>
        </member>
        <member name="T:SpyceLibrary.Sprites.Sprite">
            <summary>
            Represents a drawable texture to the game object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Sprites.Sprite.TexturePath">
            <summary>
            The path of the texture.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.#ctor">
            <summary>
            Creates a new instance of the game component.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.SetDrawOrder(System.UInt32)">
            <summary>
            Sets the draw order for the sprite.
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.SetTexturePath(System.String)">
            <summary>
            Sets the texture path of the sprite.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.SetOffset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the offset of the sprite.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.SetSize(Microsoft.Xna.Framework.Point)">
            <summary>
            Sets the drawn dimension of the sprite.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the drawn dimension of the sprite.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.Load(SpyceLibrary.Initializer,SpyceLibrary.GameObject)">
            <summary>
            Loads the textures of the sprite.
            </summary>
            <param name="init"></param>
            <param name="holder"></param>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.Draw">
            <summary>
            Draws the sprite to the screen.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.GetDrawRectangle">
            <summary>
            Gets the visible rectangle for the sprite.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpyceLibrary.Sprites.Sprite.DrawOrder">
            <summary>
            Gets the draw order for the sprite.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpyceLibrary.Time">
            <summary>
            Singleton class for handling time related applications.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Time.Instance">
            <summary>
            Singleton instance of the time.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Time.DeltaTime">
            <summary>
            The amount of elapsed time from the last update call.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Time.RawDeltaTime">
            <summary>
            The actual amount of elapsed time from the last update call.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Time.GameTime">
            <summary>
            The gametime field from the update cycle.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Time.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the time manager.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:SpyceLibrary.Transform">
            <summary>
            Represents a size transformation of the game object.
            </summary>
        </member>
        <member name="P:SpyceLibrary.Transform.Identity">
            <summary>
            Gets the identity transform. When this transform is applied, you get the exact same
            transform.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Transform.Position">
            <summary>
            The position of the transform.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Transform.Scale">
            <summary>
            The size scale of the transform.
            </summary>
        </member>
        <member name="F:SpyceLibrary.Transform.Rotation">
            <summary>
            The rotation of the sprite.
            </summary>
        </member>
        <member name="M:SpyceLibrary.Transform.SetScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the scale of the transform.
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:SpyceLibrary.Transform.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the position of the transform.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:SpyceLibrary.Transform.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the position of the transform.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:SpyceLibrary.UI.UIElement">
            <summary>
            Abstract class for various user interface elements.
            </summary>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.#ctor">
            <summary>
            Creates a new instance of the UI element.
            </summary>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.EnableCameraOffset(SpyceLibrary.Camera)">
            <summary>
            Performs UI events based off the camera transformation.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.Load(SpyceLibrary.Initializer,SpyceLibrary.GameObject)">
            <summary>
            Loads the necessary assets for the UI element.
            </summary>
            <param name="init"></param>
            <param name="holder"></param>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.Unload">
            <summary>
            Unregisters all the events.
            </summary>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of each UI element.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SpyceLibrary.UI.UIElement.GiveFocus">
            <summary>
            Marks the element this tick for having focus.
            </summary>
        </member>
        <member name="M:FastNoiseLite.#ctor(System.Int32)">
            <summary>
            Create new FastNoise object with optional seed
            </summary>
        </member>
        <member name="M:FastNoiseLite.SetSeed(System.Int32)">
            <summary>
            Sets seed used for all noise types
            </summary>
            <remarks>
            Default: 1337
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFrequency(System.Single)">
            <summary>
            Sets frequency for all noise types
            </summary>
            <remarks>
            Default: 0.01
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetNoiseType(FastNoiseLite.NoiseType)">
            <summary>
            Sets noise algorithm used for GetNoise(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetRotationType3D(FastNoiseLite.RotationType3D)">
            <summary>
            Sets domain rotation type for 3D Noise and 3D DomainWarp.
            Can aid in reducing directional artifacts when sampling a 2D plane in 3D
            </summary>
            <remarks>
            Default: None
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalType(FastNoiseLite.FractalType)">
            <summary>
            Sets method for combining octaves in all fractal noise types
            </summary>
            <remarks>
            Default: None
            Note: FractalType.DomainWarp... only affects DomainWarp(...)
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalOctaves(System.Int32)">
            <summary>
            Sets octave count for all fractal noise types 
            </summary>
            <remarks>
            Default: 3
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalLacunarity(System.Single)">
            <summary>
            Sets octave lacunarity for all fractal noise types
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalGain(System.Single)">
            <summary>
            Sets octave gain for all fractal noise types
            </summary>
            <remarks>
            Default: 0.5
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalWeightedStrength(System.Single)">
            <summary>
            Sets octave weighting for all none DomainWarp fratal types
            </summary>
            <remarks>
            Default: 0.0
            Note: Keep between 0...1 to maintain -1...1 output bounding
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalPingPongStrength(System.Single)">
            <summary>
            Sets strength of the fractal ping pong effect
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction)">
            <summary>
            Sets distance function used in cellular noise calculations
            </summary>
            <remarks>
            Default: Distance
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularReturnType(FastNoiseLite.CellularReturnType)">
            <summary>
            Sets return type from cellular noise calculations
            </summary>
            <remarks>
            Default: EuclideanSq
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularJitter(System.Single)">
            <summary>
            Sets the maximum distance a cellular point can move from it's grid position
            </summary>
            <remarks>
            Default: 1.0
            Note: Setting this higher than 1 will cause artifacts
            </remarks> 
        </member>
        <member name="M:FastNoiseLite.SetDomainWarpType(FastNoiseLite.DomainWarpType)">
            <summary>
            Sets the warp algorithm when using DomainWarp(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetDomainWarpAmp(System.Single)">
            <summary>
            Sets the maximum warp distance from original position when using DomainWarp(...)
            </summary>
            <remarks>
            Default: 1.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.GetNoise(System.Single,System.Single)">
            <summary>
            2D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:FastNoiseLite.GetNoise(System.Single,System.Single,System.Single)">
            <summary>
            3D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:FastNoiseLite.DomainWarp(System.Single@,System.Single@)">
            <summary>
            2D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y)
            noise = GetNoise(x, y)</code>
            </example>
        </member>
        <member name="M:FastNoiseLite.DomainWarp(System.Single@,System.Single@,System.Single@)">
            <summary>
            3D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y, ref z)
            noise = GetNoise(x, y, z)</code>
            </example>
        </member>
    </members>
</doc>
